#include "keymap_jp.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_SHIFT Q  &kp W         &kp E           &kp R        &kp T                                                                        &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D           &kp F        &kp G                 &caps_word                   &bt BT_PRV                &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z             &kp X         &kp C           &kp V        &kp B                 &lt 2 CAPS                   &bt BT_NXT                &kp N        &kp M  &kp COMMA  &kp DOT  &kp COLON
&kp TAB           &kp LEFT_WIN  &kp LEFT_SHIFT  &lt 4 SPACE  &mt LCTRL LANGUAGE_4  &mt LEFT_ALT LANGUAGE_5      &mt LEFT_SHIFT BACKSPACE  &lt 1 ENTER                             &lt 5 INT_HENKAN
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE                              &kp GRAVE    &kp CARET       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON
&trans  &kp DOLLAR        &kp PERCENT           &kp AMPERSAND          &kp LS(SLASH)  &none           &trans  &kp AT_SIGN  &kp UNDERSCORE  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp MINUS
&trans  &kp EXCLAMATION   &kp DOUBLE_QUOTES     &kp HASH               &kp PIPE       &lt 2 CAPS      &trans  &kp SLASH    &kp BACKSLASH   &kp COMMA         &kp PERIOD         &kp COLON
&trans  &trans            &kp LEFT_SHIFT        &trans                 &trans         &trans          &trans  &trans                                                            &trans
            >;
        };

        free_1 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        free_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&kp ESCAPE    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS                            &kp LC(Y)    &kp LC(Z)       &mkp MB3        &kp LC(LS(END))  &kp DELETE
&kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &trans      &trans        &kp LC(C)    &mkp MB1        &kp UP_ARROW    &mkp MB2         &kp RCTRL
&kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &trans      &trans        &kp LC(V)    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LA(LEFT_ARROW)
&trans        &kp N0        &trans        &trans        &trans     &trans      &kp LS(HOME)  &kp LS(END)                                                   &trans
            >;
        };

        SCROLL {
            bindings = <
&kp LC(SEMICOLON)  &kp F7  &kp F8  &kp F9  &kp F10                      &trans  &trans          &trans          &trans           &trans
&kp LC(MINUS)      &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans  &trans  &trans          &msc SCRL_UP    &trans           &trans
&kp LG(LS(S))      &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans
&trans             &trans  &trans  &trans  &trans   &trans      &trans  &trans                                                   &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
